//#define defa 0
//#define next 1
//#define before 2
//#define play 3
//#define stop 4
enum {defa,next,before,play,stop};
//enum {defa,play,};

#define button_next 2 
#define button_play 3
#define button_before 4


const int SpeakerPin = 11;

int song[] = {0,1,2};
int current_song = 0;

int NooMaLee[] = {330,294,262,294,330,330,330, 294,294,294, 330,392,392, 330,294,262,294,330,330,330 ,294,294,330,294,262};
const int numNooMaLee = 25; //จำนวนโน๊ต

int HBD[] = {262,262,294,262,339,330, 262,262,294,262,339,330, 262,262,523,440,349,330,294,262, 494,494,440,349,392,349};
const int numHBD = 26;

int LittleStar[] = {392,392,587,587,659,659,587, 523,523,494,494,440,440,392,
                    587,587,523,523,494,494,440, 587,587,523,523,494,494,440,
                    392,392,587,587,659,659,587, 523,523,494,494,440,440,392};
const int numLittleStar = 42;

struct state{
  int current_state;  // state ปัจจุบัน เช่น defa next before play stop
  unsigned long next_state[4]; //state ถัดไปหลังจากมีการทำงาน
};

typedef const struct state stype;

stype FSM[5] = {
  //current_state.  next_state
  defa,{defa,next,play,before},
  next,{next,next,play,before},
  before,{before,next,play,before},
  play,{play,next,stop,before},
  stop,{stop,next,play,before},
};
unsigned long cstate = 0;
int read_before;
int read_play;
int read_next;

int checkstate = 0;

int buttonState_play = HIGH;
int lastButtonState_play = HIGH;

int buttonState_stop = HIGH;
int lastButtonState_stop = HIGH;

int buttonState_next = HIGH;
int lastButtonState_next = HIGH;

int buttonState_before = HIGH;
int lastButtonState_before = HIGH;

unsigned long lastDebounceTime_play = 0;
unsigned long lastDebounceTime_next = 0;
unsigned long lastDebounceTime_before = 0;
unsigned long debounceDelay = 50;

//void current_song ใช้ในการเล่นเพลง

bool isNext = 0;
bool isBefore = 0;

//เพลง หนูมาลี
void current_song0(){
    for(int i=0;i<numNooMaLee;i++){
      tone(SpeakerPin, NooMaLee[i]);
      delay(200);
      noTone(SpeakerPin);
      delay(100);
      read_before = !digitalRead(button_before);
      read_play = !digitalRead(button_play);
      read_next = !digitalRead(button_next);
      int input = (read_before*4)+(read_play*2)+read_next;
      if(input!=0){
        cstate = FSM[cstate].next_state[input];
        checkstate = 1;
        break;      
      }
    }
}
//เพลง HBD
void current_song1(){
  for(int i=0;i<numHBD;i++){
      tone(SpeakerPin, HBD[i]);
      delay(40);
      noTone(SpeakerPin);
      delay(100);
      read_before = !digitalRead(button_before);
      read_play = !digitalRead(button_play);
      read_next = !digitalRead(button_next);
      int input = (read_before*4)+(read_play*2)+read_next;
      if(input!=0){
        cstate = FSM[cstate].next_state[input];
        checkstate = 1;
        break;
      }
  }
}

//เพลง LittelStar
void current_song2(){
  for(int i=0;i<numLittleStar;i++){
        tone(SpeakerPin, LittleStar[i]);
        delay(200);
        noTone(SpeakerPin);
        delay(100);
        read_before = !digitalRead(button_before);
        read_play = !digitalRead(button_play);
        read_next = !digitalRead(button_next);
        int input = (read_before*4)+(read_play*2)+read_next;
        Serial.println(input);
        if(input!=0){
          cstate = FSM[cstate].next_state[input];
          checkstate = 1;
          break;
        }
  }
}

//void setup
void setup() {
  pinMode(SpeakerPin, OUTPUT);
  pinMode(button_next , INPUT_PULLUP);
  pinMode(button_before , INPUT_PULLUP);
  pinMode(button_play , INPUT_PULLUP);
  Serial.begin(9600);
}

void loop() {
  if(FSM[cstate].current_state == defa){ //defa = 0
    Serial.println("State default");
  }

  int reading_next = digitalRead(button_next);
  // ส่วนกดปุ่ม next
  if(reading_next != lastButtonState_next){
    lastDebounceTime_next= millis();
  }
  if((millis()-lastDebounceTime_next)>debounceDelay){
    if(reading_next != buttonState_next){
      buttonState_next = reading_next;
      if(buttonState_next == LOW){
        isNext = 1;
      }
    }
  }
  lastButtonState_next = reading_next;

  if(isNext == 1){
    current_song = (current_song+1)%3;
    Serial.print("Current song = ");
    Serial.println(current_song);
    Serial.println("State next");
    isNext = 0;
  }

  // if(FSM[cstate].current_state == next){
  //   current_song =song[(current_song+1)%3];
  //   Serial.println("Current song = ");
  //   Serial.println(current_song);
  //   Serial.println("State next");

  // }
  int reading_before = digitalRead(button_before);

  if(reading_before !=lastButtonState_before){
    lastDebounceTime_before = millis();
  }

  if((millis()-lastDebounceTime_before > debounceDelay)){
    if(reading_before != buttonState_before){
      buttonState_before = reading_before;
      if(buttonState_before == LOW){
        isBefore = 1;
      }
    }
  }
  lastButtonState_before = reading_before;

  if(isBefore == 1){
    current_song = (current_song+2)%3;
    Serial.println("Current song = ");
    Serial.println(current_song);
    Serial.println("State before");
    isBefore = 0;
  }
  // if(FSM[cstate].current_state == before){
  //   current_song = song[(current_song+2)%3];
  //   Serial.println("Current song = ");
  //   Serial.println(current_song);
  //   Serial.println("State before");

  // }
  
  //play song

  //Debounce before play song
  int reading_play = digitalRead(button_play);
  // int reading_stop = digitalRead(button_play);
  int player;

  if (reading_play != lastButtonState_play){
    lastDebounceTime_play = millis();
  }

  if ((millis() - lastDebounceTime_play)> debounceDelay){
    if(reading_play != buttonState_play){
      buttonState_play = reading_play;
      if(buttonState_play == LOW){
        player=2;
      }
    }
  }
  // จบ debounce 1
  lastButtonState_play = reading_play;



  if(player = 2){
    if(FSM[cstate].current_state == play){
        Serial.println("State play");
        // song[0]
        if(current_song == 0){
          current_song0();
        }
        //song[1]
        else if(current_song == 1){
          current_song1();
        }
        //song[2]
        else if(current_song == 2){
          current_song2();
        }
        // if(FSM[cstate].current_state == stop){
        //   Serial.println("State stop");
        //   noTone(SpeakerPin);
        // }

  }


  // if(FSM[cstate].current_state == stop){
  //   if (reading_stop != lastButtonState_stop){
  //     lastDebounceTime = millis();
  //   }
  //   if ((millis() - lastDebounceTime)> debounceDelay){
  //     if(reading_stop != buttonState_stop){
  //       buttonState_stop = reading_stop;
  //       if(buttonState_stop == HIGH){
  //           Serial.println("State stop");
  //           noTone(SpeakerPin);
  //       }
  //     }
  //   }
  // }

  if(checkstate != 1){
    read_before = !digitalRead(button_before);
    read_play = !digitalRead(button_play);
    read_next = !digitalRead(button_next);

    int input = (read_before*4)+(read_play*2)+read_next;
    // Serial.println(input);

    cstate = FSM[cstate].next_state[input];
  }
  checkstate=0;
  }

}
