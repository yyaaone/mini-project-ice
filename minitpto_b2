//buzzer 7-segment
#include <SoftwareSerial.h>
SoftwareSerial mySerial(11,10);

const int SpeakerPin = 6;

enum {defa,next,before,play,stop};

int song[] = {0,1,2};
// int current_song = 0; //รับมาจาก b1

int NooMaLee[] = {330,294,262,294,330,330,330,294,294,294,330,392,392,330,294,262,294,330,330,330,294,294,330,294,262};
const int numNooMaLee = 25;

int HBD[] = {262,262,294,262,339,330,262,262,294,262,339,330,262,262,523,440,349,330,294,262,494,494,440,349,392,349};
const int numHBD = 26;

int LittleStar[] = {392,392,587,587,659,659,587,523,523,494,494,440,440,392,
                    587,587,523,523,494,494,440,587,587,523,523,494,494,440,
                    392,392,587,587,659,659,587,523,523,494,494,440,440,392};
const int numLittleStar = 42;

//state เริ่มต้นเป็น defa
// int cstate = 0;
// int checkstate = 0;

// --- ฟังก์ชันเพลง ---
// void current_song0(){
//   for(int i=0;i<numNooMaLee;i++){
//     tone(SpeakerPin, NooMaLee[i]);
    
//     if(isPlay = 0 || cstate == stop){
//       noTone(SpeakerPin);
//       break;
//     }
    
//     delay(200);
//     noTone(SpeakerPin);
//     delay(100);

//     // อ่านปุ่ม
//     read_before = !digitalRead(button_before);
//     read_play   = !digitalRead(button_play);
//     read_next   = !digitalRead(button_next);

//     // map input ให้ตรง index FSM
//     int input = -1;
//     if(read_next)   input = 0;
//     else if(read_play)   input = 1;
//     else if(read_before) input = 2;

//     if(input!=-1){
//       cstate = FSM[cstate].next_state[input];
//       checkstate = 1;
//       break;      
//     }
//   }
// }



// --- ฟังก์ชันเพลง ---
void current_song0(){
  for(int i=0;i<numNooMaLee;i++){
    //buzzer
    tone(SpeakerPin, NooMaLee[i]);
    
    if(isPlay = 0 || cstate == stop){
      noTone(SpeakerPin);
      break;
    }
    
    delay(200);
    noTone(SpeakerPin); 
    delay(100);

    //7-segment
    for (int i=0; i<numPins; i++){
      boolean isBitSet = bitRead(bitPattern[0], i);
      Serial.println(isBitSet);
      digitalWrite(segmentPins[i],isBitSet);
    }

    // map input ให้ตรง index FSM
    // int input = -1;
    // if(read_next)   input = 0;
    // else if(read_play)   input = 1;
    // else if(read_before) input = 2;

    if(input!=-1){
      cstate = FSM[cstate].next_state[input];
      checkstate = 1;
      break;
    }
  }
}

void current_song1(){
  for(int i=0;i<numHBD;i++){
    if(isPlay = 0 || cstate == stop){
      noTone(SpeakerPin);
      break;
    }
    
    tone(SpeakerPin, HBD[i]);
    delay(200);
    noTone(SpeakerPin);
    delay(100);

    //7-segment
    for (int i=0; i<numPins; i++){
      boolean isBitSet = bitRead(bitPattern[1], i);
      Serial.println(isBitSet);
      digitalWrite(segmentPins[i],isBitSet);
    }

    read_before = !digitalRead(button_before);
    read_play   = !digitalRead(button_play);
    read_next   = !digitalRead(button_next);

    int input = -1;
    if(read_next)   input = 0;
    else if(read_play)   input = 1;
    else if(read_before) input = 2;

    if(input!=-1){
      cstate = FSM[cstate].next_state[input];
      checkstate = 1;
      break;
    }
  }
}

void current_song2(){
  Serial.begin(9600);
  for(int i=0;i<numLittleStar;i++){
    
    if(isPlay = 0 || cstate == stop){
      noTone(SpeakerPin);
      break;
    }
    
    tone(SpeakerPin, LittleStar[i]);
    delay(200);
    noTone(SpeakerPin);
    delay(100);

    //7-segment
    for (int i=0; i<numPins; i++){
      boolean isBitSet = bitRead(bitPattern[2], i);
      Serial.println(isBitSet);
      digitalWrite(segmentPins[i],isBitSet);
    }


    read_before = !digitalRead(button_before);
    read_play   = !digitalRead(button_play);
    read_next   = !digitalRead(button_next); 

    int input = -1;
    if(read_next)   input = 0;
    else if(read_play)   input = 1;
    else if(read_before) input = 2;

    if(input!=-1){
      cstate = FSM[cstate].next_state[input];
      checkstate = 1;
      break;
    }
  }
}

int bitPattern[] = {
  0b11111001,  // 1
  0b10100100,  // 2
  0b10110000,  // 3 
};

const byte numPins = 8;
const int segmentPins[9]= {9,8,4,5,7,12,13};

void setup() {
   Serial.begin(9600);
   mySerial.begin(9600);
  
  for (int i=0; i<numPins; i++){
    pinMode(segmentPins[i], OUTPUT);
  }

  pinMode(SpeakerPin, OUTPUT);
}

void loop() {
  if(mySerial.available()){
    String text = mySerial.readStringUntil('\n');
    Text.trim(); // ตัดช่องว่างและ \r\n ออก
    Serial.println(text);

    int index = text.indexOf(',');
    String button = text.substring(0,index);
    String current = text.substring(index+1);
    int current_song = current.toInt();

    int input = -1;
    if(button == "next") input = 0;
    else if(button == "play") input = 1;
    else if(button == "before") input = 2;
  
  //before
    if (button == "before" || button == "next"){
      if(button == "before"){
        Serial.println("State Before");
      }
      else if(buttton == "next"){
        Serial.print
      }

      Serial.print("Current Song = "); Serial.println(current_song);
      if(current_song == 0){
        current_song0();
      }
      else if(current_song == 1){
        current_song1();
      }
      else if(current_song == 2){
        current_song2();
      }
      
    }

    //play
    else if (text == "play"){   
      int reading_play = digitalRead(button_play);
      if (reading_play != lastButtonState_play){
        lastDebounceTime_play = millis();
      }
      if ((millis() - lastDebounceTime_play)> debounceDelay){
        if(reading_play != buttonState_play){
          buttonState_play = reading_play;
          if(buttonState_play == LOW){ 
            isPlay = !isPlay;  // toggle
            if(isPlay == 0){
              noTone(SpeakerPin);
              cstate = stop;     // sync FSM
              Serial.println("Stop");
            }
            else{
              cstate = play; 
              Serial.println("Play");
            }
          }
        }
      }
      lastButtonState_play = reading_play;
      if(isPlay == 1){
        if(FSM[cstate].current_state == play){
          Serial.println("State play");
          if(current_song == 0) current_song0();
          else if(current_song == 1) current_song1();
          else if(current_song == 2) current_song2();
        }
        if(checkstate != 1){
          read_before = !digitalRead(button_before);
          read_play   = !digitalRead(button_play);
          read_next   = !digitalRead(button_next);

          int input = -1;
          if(read_next)   input = 0;
          else if(read_play)   input = 1;
          else if(read_before) input = 2;

          cstate = FSM[cstate].next_state[input];
        }
      }
    }

    // 
  }
}
